from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import re
from aiogram import Bot

from config import DB_HOST, DB_NAME, DB_PASSWORD, DB_USER, DB_PORT, ADMIN_CHAT_ID, TOKEN, SENIOR_CHAT_ID

from app.texts import *
from app.database import Database
from app.keyboards import *

router = Router()
db = Database(DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME)
bot = Bot(token=TOKEN)

class Register(StatesGroup):
    name = State()
    role = State()
    group_number = State()
    curator_groups = State()
    
class Help(StatesGroup):
    wait_support = State()
    wait_senior = State()
    
@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    query = 'SELECT * FROM users WHERE user_id = $1'  
    db_response = await db.fetch(query, user_id)
    if(db_response == []):
        await message.answer(welcome, reply_markup=start_reg_button)
    else:
        await message.answer(welcome_again, reply_markup=main_kb_list)
    
    
@router.message(Command('help'))
@router.message(F.text == '–ü–æ–º–æ—â—å')
async def get_help(message: Message):
    await message.answer(help, reply_markup=help_kb)
    
@router.message(F.text == 'üëæ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üëæ')
async def get_support(message: Message, state: FSMContext):
    await state.set_state(Help.wait_support)
    await message.answer('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É/–∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ')
    
@router.message(F.text == 'üòé –°—Ç.–ö—É—Ä–∞—Ç–æ—Ä üòé')
async def get_support(message: Message, state: FSMContext):
        await state.set_state(Help.wait_senior)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä—à–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ')  

@router.message(Help.wait_support)
async def forward_support(message: Message, state: FSMContext):
    await bot.send_message(ADMIN_CHAT_ID, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: {message.from_user.id}):")
    await message.forward(ADMIN_CHAT_ID)
    await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()
    
@router.message(Help.wait_senior)
async def forward_support(message: Message, state: FSMContext):
    await bot.send_message(SENIOR_CHAT_ID, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç.–∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: {message.from_user.id}):")
    await message.forward(SENIOR_CHAT_ID)
    await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—à–∏–º –∫—É—Ä–∞—Ç–æ—Ä–∞–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@router.message(Command('reg'))
@router.message(F.text == '–ü–æ–µ—Ö–∞–ª–∏!')
async def start_register(message: Message | CallbackQuery, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û: ')
    await state.set_state(Register.name)
    
@router.message(Register.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.role)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å: ', reply_markup=reg_role_kb)
    
@router.message(Register.role)
async def process_role(message: Message, state: FSMContext):
    role = message.text
    if(role == '–ü–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫'):
        await state.update_data(role='freshman')
    else:
        await state.update_data(role='curator')
    
    await state.set_state(Register.group_number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É (–≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —É—á–∏—Ç–µ—Å—å): ', reply_markup=ReplyKeyboardRemove())
    
@router.message(Register.group_number)
async def process_group(message: Message, state: FSMContext):
    user_id = message.from_user.id
    pattern = r'^[–ë–°–ú–ê]\d{2}-\d{3}$'
    group_number = message.text
    if not re.match(pattern, group_number):
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ëXX-XXX (–°XX-XXX)")
    else:
        await state.update_data(group_number=group_number)
        current_data = await state.get_data()
        role = current_data['role']
        if(role == 'freshman'):
            query = """INSERT INTO users(user_id, full_name, role, group_number) VALUES ($1, $2, $3, $4)"""
            await db.execute(query, user_id, current_data['name'], current_data['role'], current_data['group_number'])
            await state.clear()
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        elif(role == 'curator'):
            await state.set_state(Register.curator_groups)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É(-—ã) –≥—Ä—É–ø–ø—É(-—ã) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ')

@router.message(Register.curator_groups)
async def process_cur_groups(message: Message, state: FSMContext):
    user_id = message.from_user.id
    pattern = r'^[–ë–°–ú–ê]\d{2}-\d{3}$'
    groups = message.text.split()
    current_data = await state.get_data()
    ln = len(groups)
    flag = 0
    for i in range(ln):
        if not re.match(pattern, groups[i]):
            flag += 1
    if(flag!=0): await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã.\
 –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ëXX-XXX (–°XX-XXX)")
    else:
        if(ln==1):
            query = 'INSERT INTO users (user_id, full_name, role, group_number, c_group_1) VALUES ($1, $2, $3, $4, $5)'
            print(current_data)
            await state.clear()
            await db.execute(query, user_id, current_data['name'], current_data['role'], current_data['group_number'], groups[0])
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        elif(ln==2):
            query = 'INSERT INTO users(user_id, full_name, role, group_number, c_group_1, c_group_2) VALUES ($1, $2, $3, $4, $5, $6)'
            await state.clear()
            await db.execute(query, user_id, current_data['name'], current_data['role'], current_data['group_number'], groups[0], groups[1])
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        